# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # schedule:
  #   - cron:  '*/5 * * * *'    # At every 2nd minute
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  #build:
    # The type of runner that the job will run on
    #runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    # steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo Hello, world!

      # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   run: |
      #     echo Add other actions to build,
      #     echo test, and deploy your project.

  # zip-file:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Create zip folder
  #     run: |
  #       mkdir release
  #       zip -r lambda.zip ./python
  #       ls -lrt
  #   - name: upload zip file to S3
  #     run: ./././scripts/aws-test.sh ${{secrets.AWS_ACCESS_KEY}} ${{secrets.AWS_SECRET_ACCESS}} ${{secrets.AWS_BUCKET}} 

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ././terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - uses: actions/checkout@v3
    - name: Checkout
      run: |
          ls -lrt

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.12.24

  #   # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
  #   - name: Terraform Init
  #     id: init
  #     env:
  #       AWS_REGION: 'us-east-1'
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     run: |
  #       terraform --version 
  #       terraform init -input=false

  #   # Checks that all Terraform configuration files adhere to a canonical format
  #   - name: Terraform Format
  #     run: terraform fmt -check

  #   # Generates an execution plan for Terraform
  #   - name: Terraform Plan
  #     run: terraform plan -input=false

  #     # On push to "main", build or change infrastructure according to Terraform configuration files
  #     # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
  #   - name: Terraform Apply
  #     if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
  #     run: terraform apply -auto-approve -input=false

